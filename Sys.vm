function Sys.min 2
    push argument 0
    push argument 1 
    lt 
    if-goto ZEROLESS
    // If argument 0 is greater or equal to argument 1
    push argument 1
    goto END

label ZEROLESS
    // If argument 0 is less than argument 1
    push argument 0

label END
    return

function Sys.max 2
    push argument 0
    push argument 1
    // Compare the two arguments
    gt
    // If argument 0 is greater, jump to ARG0_GREATER
    if-goto ARG0_GREATER
    push argument 1
    goto END

label ARG0_GREATER
    push argument 0

label END
    return

function Sys.range 2
    // Check if n <= 1
    push argument 1
    push constant 1
    lt
    if-goto RETURN_ZERO

    // Initialize min and max to the first element of the array
    push argument 0
    push constant 0
    add
    pop pointer 1
    push that 0
    pop temp 0 // min
    push that 0
    pop temp 1 // max

    // Initialize loop counter
    push constant 1
    pop temp 2

label LOOP_START
    // Check if counter is greater than or equal to n
    push temp 2
    push argument 1
    lt
    not
    if-goto END_LOOP

label CONTINUE_LOOP
    // Load the current element
    push argument 0
    push temp 2
    add
    pop pointer 1
    
    // Update min if the current element is smaller
    push that 0
    push temp 0
    call Sys.min 2
    pop temp 0

    // Update max if the current element is smaller
    push that 0
    push temp 1
    call Sys.max 2
    pop temp 1


label INCREMENT
    // Increment loop counter
    push temp 2
    push constant 1
    add
    pop temp 2
    goto LOOP_START


label END_LOOP
    // Calculate the range
    push temp 1
    push temp 0
    sub
    return

label RETURN_ZERO
    // Return 0 if n <= 1
    push constant 0
    return

function Sys.init 0
    call Sys.range 2
label WHILE
    goto WHILE